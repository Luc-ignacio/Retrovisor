generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  // Note: The file path here is often ignored in favour of the adapter URL, 
  // but Prisma still expects a value for local development/migrations.
  url      = "file:./dev.db"
}

model Location {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String
  lat         Int
  long        Int
  User        User          @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  LocationLog LocationLog[]
}

model LocationLog {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  startedAt        DateTime
  endedAt          DateTime
  lat              Int
  long             Int
  locationId       Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  Location         Location           @relation(fields: [locationId], references: [id])
  LocationLogImage LocationLogImage[]
}

model LocationLogImage {
  id            Int         @id @default(autoincrement())
  key           String
  locationLogId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  LocationLog   LocationLog @relation(fields: [locationLogId], references: [id])
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  Location      Location[]

  @@unique([email])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}
